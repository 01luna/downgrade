#!/usr/bin/env bash
# shellcheck disable=SC1091
. gettext.sh

usage() {
  cat <<EOF
$(gettext "Usage: downgrade [option...] <pkg> [pkg...] [-- pacman_option...]")

$(gettext "Options"):
  --pacman        <$(gettext "command")>
                  $(gettext "pacman command to use, defaults to") "pacman"
  --pacman-conf   <$(gettext "path")>
                  $(gettext "pacman configuration file, defaults to") "/etc/pacman.conf"
  --pacman-cache  <$(gettext "path")>
                  $(gettext "pacman cache directory,")
                  $(gettext "default value(s) taken from pacman configuration file,")
                  $(gettext "or otherwise defaults to") "/var/cache/pacman/pkg"
  --pacman-log    <$(gettext "path")>
                  $(gettext "pacman log file,")
                  $(gettext "default value taken from pacman configuration file,")
                  $(gettext "or otherwise defaults to") "/var/log/pacman.log"
  --maxdepth      <$(gettext "integer")>
                  $(gettext "maximum depth to search for cached packages, defaults to") 1
  --ala-url       <url>
                  $(gettext "location of ALA server, defaults to") "https://archive.archlinux.org"
  --ala-only      $(gettext "only use ALA server")
  --cached-only   $(gettext "only use cached packages")
  --version       $(gettext "show downgrade version")
  -h, --help      $(gettext "show help script")

$(gettext "Note"):
  $(gettext "Options after the -- characters will be treated as pacman options.")
  $(gettext "See downgrade(8) for details.")
EOF
}

read_downgrade_conf() {
  local var=$1

  eval "$var=($(grep -E -v '^ *(#.*)?$' "$downgrade_conf" 2>/dev/null | xargs printf '%q '))"
}

read_unique() {
  local var=$1
  shift

  if [[ -n "$*" ]]; then
    # shellcheck disable=SC2229
    mapfile -t "$var" < <(printf "%s\n" "$@" | sort -u)
  fi
}

parse_options() {
  while [[ -n "$1" ]]; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;
      --version)
        printf "%s\n" "$downgrade_version"
        exit 0
        ;;
      --pacman | --pacman-conf)
        search_options+=("$1" "$2")
        install_options+=("$1" "$2")
        shift
        ;;
      --ala-only | --ala-url | --cached-only)
        search_options+=("$1")
        ;;
      --maxdepth | --pacman-cache | --pacman-log)
        search_options+=("$1" "$2")
        shift
        ;;
      --)
        install_options+=("$@")
        shift
        break
        ;;
      -*)
        local current_option
        # shellcheck disable=SC2034
        current_option="$1"
        {
          eval_gettext "Unrecognized option \$current_option"
          echo
          usage
        } >&2
        exit 1
        ;;
      *)
        terms+=("$1")
        ;;
    esac
    shift
  done

  if ((!"${#terms[@]}")); then
    {
      gettext "No packages provided for downgrading"
      echo
      usage
    } >&2
    exit 1
  fi
}

cli() {
  set -e

  conf_args=()
  read_downgrade_conf conf_args
  parse_options "${conf_args[@]}" "$@"

  # TODO: do we really need this?
  read_unique terms "${terms[@]}"

  if ((UID)); then
    {
      gettext "downgrade must be run as root"
      echo
    } >&2
    exit 1
  fi

  {
    for term in "${terms[@]}"; do
      "$bin"/downgrade-search "${search_options[@]}" "$term" |
        "$bin"/downgrade-select
    done
  } | "$bin"/downgrade-install "${install_options[@]}"
}

downgrade_conf="/etc/xdg/downgrade/downgrade.conf"
downgrade_version="11.0.0"

install_root=$(cd "$(dirname "$0")/.." && pwd)
bin=$install_root/bin
share=$install_root/share

if [[ -d "$share"/locale ]]; then
  # Packaged installation
  export TEXTDOMAINDIR=$share/locale
else
  # Probably testing ./downgrade
  export TEXTDOMAINDIR=/usr/share/locale
fi

export TEXTDOMAIN=downgrade

if ((!LIB)); then
  cli "$@"
fi
